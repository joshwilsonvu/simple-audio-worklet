function simpleAudioWorklet(t,{processOnly:e=!1,parameterDescriptors:r=[],onmessage:s,registerAs:n}={}){class i extends AudioWorkletProcessor{constructor(t){super(t),this.next=this.first,this.isDone=!1;const e=t.outputChannelCount[0]||2;this.args={parameters:{},input:[],port:this.port,env:{outputChannelCount:e,sampleRate:sampleRate}},this.port.addEventListener("message",t=>{"stop"===t.data.toString().toLowerCase()&&this.stop()}),s&&this.port.addEventListener("message",s)}static get parameterDescriptors(){return t.parameterDescriptors||r}process(t,r,s){if(this.isDone)throw new RangeError("Attempted to process after iterator has finished.");const n=t[0]||[],i=r[0],o=[];for(let t in s)s.hasOwnProperty(t)&&(this.args.parameters[t]=s[t][0],1!==s[t].length&&o.push(t));this.args.env.outputChannelCount=i.length,this.args.env.sampleRate=sampleRate;for(let t=0;t<i[0].length;++t){for(let e of o)this.args.parameters[e]=s[e][t];for(let e=0;e<n.length;e++)this.args.input.length=n.length,this.args.input[e]=n[e][t];let e=this.next(this.args);if(isYieldOutput(e)&&({value:e,done:this.isDone}=e),this.isDone)return this.port.postMessage("done"),!1;if(Array.isArray(e))if(e.length>=i.length)for(let r=0;r<i.length;++r)i[r][t]=e[r];else for(let r=0;r<i.length;++r)i[r][t]=e[0];else for(let r=0;r<i.length;++r)i[r][t]=e}return!e}first(e){if("g"===t.type){let r=t.impl(e);return this.next=r.next.bind(r),this.cleanup=r.return&&r.return.bind(r),0}if("p"===t.type)return this.next=t.impl,this.next(e);if("c"===t.type){let r=new t.impl;if(r.next)return this.next=r.next.bind(r),this.next(e)}throw new Error("Argument must be a pure function, a generator function, or a class that defines next().")}stop(){this.isDone=!0,this.cleanup&&this.cleanup()}}return n&&registerProcessor(n,i),i}export function fromGenerator(t,e){return simpleAudioWorklet({type:"g",impl:t},e)};export function fromClass(t,e){return simpleAudioWorklet({type:"c",impl:t},e)};export function fromPure(t,e){return simpleAudioWorklet({type:"p",impl:t},e)};function isYieldOutput(t){return Object.prototype.hasOwnProperty.call(t,"value")}